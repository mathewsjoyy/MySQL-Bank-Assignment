/* DDL (Data Definition Language) QUERIES */
/* Create database and tables */

/* Removes database called 'BankProcess' if it already has been made.*/
DROP DATABASE IF EXISTS bank_assignment;

/*Create database called 'BankProcess' and use as the default (current) database for subsequent statements.*/
CREATE DATABASE bank_assignment;
USE bank_assignment;

CREATE TABLE branch (
	branch_id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    address_id INT UNSIGNED NOT NULL, 
    branch_name VARCHAR(30) NOT NULL,
    PRIMARY KEY (branch_id),
    UNIQUE (address_id, branch_name)
)ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;

CREATE TABLE customer (
    customer_id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    first_name VARCHAR(100)  NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    date_of_birth date NOT NULL,
    email VARCHAR(255),
    PRIMARY KEY (customer_id),
    UNIQUE (email)
)ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;

CREATE TABLE customer_account ( -- Junction table for many-many relation (join accounts)
	customer_id INT UNSIGNED,
    account_id INT UNSIGNED,
    PRIMARY KEY (customer_id, account_id) -- Composite key
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE account (
    account_id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    customer_id INT UNSIGNED NOT NULL,
    account_type_id INT UNSIGNED NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    opening_balance DECIMAL(10,2) NOT NULL DEFAULT 51,
    account_number VARCHAR(8) NOT NULL,
    sort_code VARCHAR(8) NOT NULL,
    create_date DATE DEFAULT now(),
    branch_id INT UNSIGNED NOT NULL,
    PRIMARY KEY (account_id),
    UNIQUE(sort_code, account_number)    
)ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1; 

CREATE TABLE account_types (
	account_type_id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    name VARCHAR(20) NOT NULL,
    PRIMARY KEY (account_type_id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1; 

CREATE TABLE customer_address (
    customer_id INT UNSIGNED,
    address_id INT UNSIGNED,
    PRIMARY KEY (customer_id, address_id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE address (
	address_id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    address_line1 VARCHAR(255) NOT NULL,
    address_line2 VARCHAR(255),
    postal_code VARCHAR(32) NOT NULL,
    state VARCHAR(50) NOT NULL,
    city VARCHAR(50) NOT NULL,
    PRIMARY KEY (address_id),
    UNIQUE(postal_code)
)ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;

CREATE TABLE transactions (
	transaction_id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    account_id INT UNSIGNED NOT NULL,
    transaction_type_id INT UNSIGNED NOT NULL,
    transaction_date DATETIME NOT NULL DEFAULT now(),
    isOutgoing BOOLEAN NOT NULL DEFAULT FALSE,
    isIncoming BOOLEAN NOT NULL DEFAULT FALSE,
    amount DECIMAL(10,2) NOT NULL DEFAULT 0,
    description TEXT DEFAULT 'None',
    PRIMARY KEY (transaction_id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;

CREATE TABLE transaction_types (
	transaction_type_id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    name VARCHAR(20) NOT NULL,
    PRIMARY KEY (transaction_type_id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1; 

CREATE TABLE loans (
	loan_id INT UNSIGNED NOT NULL,
    account_id INT UNSIGNED NOT NULL,
    monthly_rate DECIMAL(10,2) NOT NULL,
    duration_month INT NOT NULL,
    first_payment DATE NOT NULL,
    monthly_due_date DATE NOT NULL,
    PRIMARY KEY (loan_id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;

CREATE TABLE customer_phone (
    contact_id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    customer_id INT UNSIGNED NOT NULL,
	contact_number VARCHAR(11) NOT NULL,
    country_code INT UNSIGNED NOT NULL,
    type ENUM('landphone','mobile','other') NOT NULL,
    PRIMARY KEY (contact_id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;


/* Add foreign keys and any neccessary constraints. */
/* KEY : fk_[referencing table name]_[referenced table name]_[referencing field name]. */
ALTER TABLE account ADD CONSTRAINT fk_account_branch_branch_id
FOREIGN KEY (branch_id) REFERENCES branch(branch_id)
ON DELETE CASCADE ON UPDATE CASCADE; -- DOUBLE CHECK IF THIS IS CORRECT VALID OPTION TO USE (also for the ones below)

ALTER TABLE account ADD CONSTRAINT fk_account_account_types_account_type_id
FOREIGN KEY (account_type_id) REFERENCES account_types(account_type_id)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE branch ADD CONSTRAINT fk_branch_address_address_id
FOREIGN KEY (address_id) REFERENCES address(address_id)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE customer_address ADD CONSTRAINT fk_customer_address_customer_customer_id
FOREIGN KEY (customer_id) REFERENCES customer(customer_id)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE customer_address ADD CONSTRAINT fk_customer_address_address_customer_id
FOREIGN KEY (address_id) REFERENCES address(address_id)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE customer_account ADD CONSTRAINT fk_customer_account_customer_customer_id
FOREIGN KEY (customer_id) REFERENCES customer(customer_id)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE customer_account ADD CONSTRAINT fk_customer_account_account_account_id
FOREIGN KEY (account_id) REFERENCES account(account_id)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE customer_phone ADD CONSTRAINT fk_customer_phone_customer_customer_id
FOREIGN KEY (customer_id) REFERENCES customer(customer_id)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE transactions ADD CONSTRAINT fk_transactions_account_account_id
FOREIGN KEY (account_id) REFERENCES account(account_id)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE transactions ADD CONSTRAINT fk_transactions_transaction_types_transaction_type_id
FOREIGN KEY (transaction_type_id) REFERENCES transaction_types(transaction_type_id)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE loans ADD CONSTRAINT fk_loans_account_account_id
FOREIGN KEY (account_id) REFERENCES account(account_id)
ON DELETE CASCADE ON UPDATE CASCADE;


/* DML (Data Manipulation) QUERIES */

/* Trigger on account table to prevent users entering a opening balance less than 51 */
DELIMITER $$
CREATE TRIGGER account_opening_balance_check BEFORE INSERT ON account
	FOR EACH ROW 
    	BEGIN 
        	IF NEW.opening_balance <= 50.00 THEN
            	SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Your opening balance must be greater then 50.';
            END IF;
        END $$
DELIMITER ;

/* Trigger on transactions table to ensure a transaction isnt both incoming and outgoing */
DELIMITER $$
CREATE TRIGGER transactions_in_out_amount_check BEFORE INSERT ON transactions
	FOR EACH ROW
    	BEGIN
        	IF (NEW.isOutgoing = true and NEW.isIncoming = true) THEN
            	SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Both "isOutgoing" and "isIncoming" columns cannot be set to "true"';
            END IF;
        END $$
DELIMITER ;


/* Populating the created tables with data */
INSERT INTO address ()


INSERT INTO branch (branch_id, address_id, branch_name) 
VALUES 
(1, 1, "London main branch"),
(2, 2, "Manchester"),
(3, 3, "Lincoln");

INSERT INTO customers (customer_id, first_name, last_name, date_of_birth, email)
VALUES
(1, 'Orran', 'Targetter', '12/08/1979', 'otargetter0@ehow.com'),
(2, 'Danell', 'Braunroth', '11/25/1991', 'dbraunroth1@xrea.com'),
(3, 'Boris', 'Kesley', '11/22/1986', 'bkesley2@addtoany.com'),
(4, 'Antonin', 'Bladon', '03/26/1987', 'abladon3@jugem.jp'),
(5, 'Dorey', 'Nortcliffe', '06/30/1962', 'dnortcliffe4@about.me'),
(6, 'Karlan', 'Scedall', '07/11/1982', 'kscedall5@alibaba.com'),
(7, 'Brewster', 'Swett', '03/15/1987', 'bswett6@squidoo.com'),
(8, 'Jolynn', 'Twinn', '01/25/1981', 'jtwinn7@about.me'),
(9, 'Izabel', 'Boyson', '07/20/1995', 'iboyson8@dion.ne.jp'),
(10, 'Benedicto', 'Scane', '06/02/1959', 'bscane9@tripadvisor.com');



/* DCL (Data Control Language) QUERIES */
/* Creating users and setting permissions */

/* Set users and grant permissions */
/* We have 1 read/write user and 1 read user */
CREATE USER IF NOT EXISTS 'admin'@'localhost' IDENTIFIED BY 'AdminUser#2021'; -- Set secure passwords
GRANT SELECT, INSERT, UPDATE, DELETE, INDEX, CREATE, ALTER 
	ON bank_assignment TO 'admin'@'localhost';

CREATE USER IF NOT EXISTS 'read'@'localhost' IDENTIFIED BY 'ReadUser#2021';
GRANT SELECT
	ON bank_assignment.* TO 'read'@'localhost'; /* grant to all tables */

/* Show all privileges users have been given */
SHOW GRANTS FOR 'admin'@'localhost';
SHOW GRANTS FOR 'read'@'localhost';
