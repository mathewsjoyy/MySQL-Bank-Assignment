/* DDL (Data Definition Language) QUERIES */
/* Create database and tables */

/* Removes database called 'BankProcess' if it already has been made.*/
DROP DATABASE IF EXISTS bank_assignment;

/*Create database called 'BankProcess' and use as the default (current) database for subsequent statements.*/
CREATE DATABASE bank_assignment;
USE bank_assignment;

CREATE TABLE branch (
	branch_id INT AUTO_INCREMENT,
    address_id INT NOT NULL, 
    branch_name VARCHAR(50) NOT NULL,
    PRIMARY KEY (branch_id),
    UNIQUE (address_id), -- We have 2 seperate unqiuesare theyre individually unqiue
    UNIQUE (branch_name)
)ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;

CREATE TABLE customer (
    customer_id INT AUTO_INCREMENT,
    first_name VARCHAR(100)  NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    date_of_birth DATE NOT NULL,
    email VARCHAR(255) NOT NULL,
    PRIMARY KEY (customer_id),
    UNIQUE (email)
)ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;

CREATE TABLE customer_account ( -- Junction table for many-many relation (join accounts)
	customer_id INT,
    account_id INT,
    PRIMARY KEY (customer_id, account_id) -- Composite key
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE account (
    account_id INT AUTO_INCREMENT,
    customer_id INT NOT NULL,
    account_type_id VARCHAR(15) NOT NULL,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    opening_balance DECIMAL(10,2) NOT NULL DEFAULT 51,
    account_number INT(8) NOT NULL,
    sort_code VARCHAR(8) NOT NULL,
    created_date DATE DEFAULT now(),
    branch_id INT NOT NULL,
    PRIMARY KEY (account_id),
    UNIQUE(sort_code),
    UNIQUE(account_number)
)ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1; 

CREATE TABLE account_types (
	account_type_id VARCHAR(15),
    description TEXT NOT NULL,
    PRIMARY KEY (account_type_id),
    UNIQUE(description)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE customer_address (
    customer_id INT,
    address_id INT,
    PRIMARY KEY (customer_id, address_id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE address (
	address_id INT AUTO_INCREMENT,
    address_line1 VARCHAR(255) NOT NULL,
    address_line2 VARCHAR(255) DEFAULT NULL,
    postal_code VARCHAR(10) NOT NULL,
    state VARCHAR(50) NOT NULL,
    city VARCHAR(50) NOT NULL,
    PRIMARY KEY (address_id),
    UNIQUE(postal_code)
)ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;

CREATE TABLE transactions (
	transaction_id INT AUTO_INCREMENT,
    account_id INT NOT NULL,
    transaction_date DATETIME NOT NULL DEFAULT now(),
    isOutgoing BOOLEAN NOT NULL DEFAULT FALSE,
    isIncoming BOOLEAN NOT NULL DEFAULT FALSE,
    amount DECIMAL(10,2) NOT NULL DEFAULT 0,
    reason VARCHAR(255) DEFAULT "n/a",
    PRIMARY KEY (transaction_id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;

CREATE TABLE transaction_types (
	transaction_type_id VARCHAR(15),
    description TEXT NOT NULL,
    PRIMARY KEY (transaction_type_id),
    UNIQUE(description)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE loans (
	loan_id INT,
    account_id INT NOT NULL,
    monthly_rate DECIMAL(10,2) NOT NULL,
    duration_months INT NOT NULL,
    first_payment DATE NOT NULL,
    monthly_due_date DATE NOT NULL,
    PRIMARY KEY (loan_id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;

CREATE TABLE contact_number (
    contact_id INT AUTO_INCREMENT,
	number VARCHAR(15) NOT NULL,
    country_code VARCHAR(6),
    type ENUM('landphone','mobile') NOT NULL,
    PRIMARY KEY (contact_id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;

CREATE TABLE customer_contact_number (
	customer_id INT,
    contact_id INT,
    PRIMARY KEY (customer_id, contact_id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;


/* Add foreign keys and any neccessary constraints. */
/* KEY : fk_[referencing table name]_[referenced table name]_[referencing field name]. */
ALTER TABLE account ADD CONSTRAINT fk_account_branch_branch_id
FOREIGN KEY (branch_id) REFERENCES branch(branch_id)
ON DELETE CASCADE ON UPDATE CASCADE; -- DOUBLE CHECK IF THIS IS CORRECT VALID OPTION TO USE (also for the ones below)

ALTER TABLE account ADD CONSTRAINT fk_account_account_types_account_type_id
FOREIGN KEY (account_type_id) REFERENCES account_types(account_type_id)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE branch ADD CONSTRAINT fk_branch_address_address_id
FOREIGN KEY (address_id) REFERENCES address(address_id)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE customer_address ADD CONSTRAINT fk_customer_address_customer_customer_id
FOREIGN KEY (customer_id) REFERENCES customer(customer_id)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE customer_address ADD CONSTRAINT fk_customer_address_address_customer_id
FOREIGN KEY (address_id) REFERENCES address(address_id)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE customer_account ADD CONSTRAINT fk_customer_account_customer_customer_id
FOREIGN KEY (customer_id) REFERENCES customer(customer_id)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE customer_account ADD CONSTRAINT fk_customer_account_account_account_id
FOREIGN KEY (account_id) REFERENCES account(account_id)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE customer_contact_number ADD CONSTRAINT fk_customer_contact_number_customer_customer_id
FOREIGN KEY (customer_id) REFERENCES customer(customer_id)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE customer_contact_number ADD CONSTRAINT fk_customer_contact_number_contact_number_contact_id
FOREIGN KEY (contact_id) REFERENCES contact_number(contact_id)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE transactions ADD CONSTRAINT fk_transactions_account_account_id
FOREIGN KEY (account_id) REFERENCES account(account_id)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE transactions ADD CONSTRAINT fk_transactions_transaction_types_transaction_type_id
FOREIGN KEY (transaction_type_id) REFERENCES transaction_types(transaction_type_id)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE loans ADD CONSTRAINT fk_loans_account_account_id
FOREIGN KEY (account_id) REFERENCES account(account_id)
ON DELETE CASCADE ON UPDATE CASCADE;



/* DML (Data Manipulation) QUERIES */

/* Trigger on account table to prevent users entering a opening balance less than 51 */
DELIMITER $$
CREATE TRIGGER account_opening_balance_check BEFORE INSERT ON account
	FOR EACH ROW 
    	BEGIN 
        	IF NEW.opening_balance <= 50.00 THEN
            	SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Your opening balance must be greater then 50.';
                ROLLBACK
            END IF;
        END $$
DELIMITER ;

/* Trigger on transactions table to ensure a transaction isnt both incoming and outgoing */
DELIMITER $$
CREATE TRIGGER transactions_in_out_amount_check BEFORE INSERT ON transactions
	FOR EACH ROW
    	BEGIN
        	IF (NEW.isOutgoing = true and NEW.isIncoming = true) THEN
            	SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Both "isOutgoing" and "isIncoming" columns cannot be set to "true"';
                ROLLBACK
            END IF;
        END $$
DELIMITER ;

/* Trigger to stop invalid transactions */
CREATE TRIGGER bank_accounts_transactions_prevent_sql_injection BEFORE INSERT ON transactions
BEGIN
  IF NEW.isOutgoing THEN
    IF NEW.amount < 0 THEN
      SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Negative amount not allowed';
    END IF;
  END IF;
END;




/* Populating the created tables with data */
INSERT INTO address (address_id, address_line1, address_line2, postal_code, state, city)
VALUES
(1, "11 parks bridge", "west avenue road", "E1 7AB", "Greater London City of London", "London"),
(2, "4 knights house", "east brooke avenue", "M1 1TJ", "Greater Manchester", "Manchester"),
(3, "24 brayford", NULL, "LN1 2AB", "Lincolnshire", "Lincoln"),
(4, "33 New Street", NULL, "SL26 2NJ", "Berkshire", "Slough"),
(5, "3 North Road", NULL, "NN85 5OH", "Northhamptonshire", "Northhampton"),
(6, "90 Church Road", NULL, "PO62 9OU", "Hampshire", "Portsmouth"),
(7, "1 Victoria Street", NULL, "UB24 8GY", "Greater London", "Southhall"),
(8, "61 North Street", NULL, "HA72 6ML", "Middlesex", "Harrow"),
(9, "52 The Avenue", NULL, "NG23 2MO", "Nottinghamshire", "Nottingham"),
(10, "78 Queen Street", NULL, "LA31 1IA", "Lancashire", "Lancaster");

INSERT INTO customer_address (customer_id, address_id)
VALUES
(1,3),
(2,6),
(3,7),
(4,4),
(5,5),
(6,8),
(7,10),
(8,9),
(9,10),
(10,4);
    
INSERT INTO contact_number (contact_id, number, country_code, type)
VALUES
(1, "07484392817", "44", "mobile"),
(2, "07539872531", "44", "mobile"),
(3, "07563890733", "44", "mobile"),
(4, "07566578930", "44", "mobile"),
(5, "07466582912", "44", "mobile"),
(6, "07467434519", "44", "mobile"),
(7, "07446662317", "44", "mobile"),
(8, "07467499910", "44", "mobile"),
(9, "07466682917", "44", "mobile"),
(10, "07777482911", "44", "mobile"),
(11, "016123834880", "44", "landline"),
(12, "01636548900", "44", "landline");
 
INSERT INTO branch (branch_id, address_id, branch_name) 
VALUES 
(1, 1, "London main branch"),
(2, 2, "Manchester"),
(3, 3, "Lincoln");

INSERT INTO customer (customer_id, first_name, last_name, date_of_birth, email)
VALUES
(1, 'Orran', 'Targetter', '1979-12-08', 'otargetter0@ehow.com'),
(2, 'Danell', 'Braunroth', '1991-11-25', 'dbraunroth1@xrea.com'),
(3, 'Boris', 'Kesley', '1986-11-22', 'bkesley2@addtoany.com'),
(4, 'Antonin', 'Bladon', '1987-03-26', 'abladon3@jugem.jp'),
(5, 'Dorey', 'Nortcliffe', '1962-06-9', 'dnortcliffe4@about.me'),
(6, 'Karlan', 'Scedall', '1982-07-11', 'kscedall5@alibaba.com'),
(7, 'Brewster', 'Swett', '1987-03-13', 'bswett6@squidoo.com'),
(8, 'Jolynn', 'Twinn', '1981-01-22', 'jtwinn7@about.me'),
(9, 'Izabel', 'Boyson', '1995-07-20', 'iboyson8@dion.ne.jp'),
(10, 'Benedicto', 'Scane', '1959-06-02', 'bscane9@tripadvisor.com');

INSERT INTO account_types (account_type_id, description)
VALUES 
("CURRENTACC", "A current account is used for daily banking needs, such as making cash deposits and withdrawals, receiving their salary and setting up direct debits."),
("SAVINGSACC", "With a saving account you pay money into and earn interest from."),
("JOINTACC", "A joint account is a simple way for two people to share access to the same bank account creating one monthly statement.");


-- FOR ACCOUNTS TABLE
/* the bank branch is encoded into the account number, so internally you can immediately see that if the account begins with “700″, then the account “belongs” to Branch X and if it starts with “703” it “belongs” to Branch Y. */



-- insert differnt transaction types into the transaction_types table
INSERT INTO transaction_types (transaction_type_id, description)
VALUES
("DEPOSIT", "A deposit is a payment made to a bank account. It is usually made by a customer to pay for goods or services."),
("WITHDRAWAL", "A withdrawal is a payment made from a bank account. It is usually made by a customer to pay for goods or services."),
("TRANSFER", "A transfer is a payment made from one bank account to another. It is usually made by a customer to pay for goods or services."),
("INTEREST", "An interest payment is made to a bank account. It is usually made by a bank to pay the interest on a customer’s account."),
("FEE", "A fee is a payment made to a bank account. It is usually made by a bank to pay for goods or services."),
("CHARGE", "A charge is a payment made to a bank account. It is usually made by a bank to pay for goods or services."),
("PAYMENT", "A payment is a payment made to a bank account. It is usually made by a customer to pay for goods or services.");













/* DCL (Data Control Language) QUERIES */
/* Creating users and setting permissions */

/* Set users and grant permissions */
/* We have 1 read/write user and 1 read user */
CREATE USER IF NOT EXISTS 'admin'@'localhost' IDENTIFIED BY 'AdminUser#2021'; -- Set secure passwords
GRANT SELECT, INSERT, UPDATE, DELETE, INDEX, CREATE, ALTER 
	ON bank_assignment TO 'admin'@'localhost';

CREATE USER IF NOT EXISTS 'read'@'localhost' IDENTIFIED BY 'ReadUser#2021';
GRANT SELECT
	ON bank_assignment.* TO 'read'@'localhost'; /* grant to all tables */

/* Show all privileges users have been given */
SHOW GRANTS FOR 'admin'@'localhost';
SHOW GRANTS FOR 'read'@'localhost';
