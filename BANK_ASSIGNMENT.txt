-- DDL (Data Definition Language) QUERIES
-- Create database and tables

-- Removes database called 'BankProcess' if it already has been made.
DROP DATABASE IF EXISTS bank;

-- Create database called 'BankProcess' and use as the default (current) database for subsequent statements.
CREATE DATABASE bank;
USE bank;


CREATE TABLE branch (
	branch_id INT AUTO_INCREMENT,
    address_id INT NOT NULL, 
    branch_name VARCHAR(50) NOT NULL,
    PRIMARY KEY (branch_id),
    UNIQUE (address_id), -- We have 2 seperate unqiuesare theyre individually unqiue
    UNIQUE (branch_name)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE customer (
    customer_id INT AUTO_INCREMENT,
    first_name VARCHAR(100)  NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    date_of_birth DATE NOT NULL,
    email VARCHAR(255) NOT NULL,
    PRIMARY KEY (customer_id),
    UNIQUE (email)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE customer_account ( -- Junction table for many-many relation (join accounts)
	customer_id INT,
    account_id INT,
    PRIMARY KEY (customer_id, account_id) -- Composite key
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE account (
    account_id INT AUTO_INCREMENT,
    account_type_id VARCHAR(15) NOT NULL,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    opening_balance DECIMAL(10,2) NOT NULL DEFAULT 51,
    account_number INT(8) NOT NULL,
    sort_code INT(6) NOT NULL,
    created_date DATE DEFAULT now(),
    branch_id INT NOT NULL,
    PRIMARY KEY (account_id),
    UNIQUE(sort_code, account_number)
)ENGINE=InnoDB DEFAULT CHARSET=utf8; 

CREATE TABLE account_type (
	account_type_id VARCHAR(15),
    description TEXT NOT NULL,
    PRIMARY KEY (account_type_id),
    UNIQUE(description)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE customer_address (
    customer_id INT,
    address_id INT,
    PRIMARY KEY (customer_id, address_id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE address (
	address_id INT AUTO_INCREMENT,
    address_line1 VARCHAR(255) NOT NULL,
    address_line2 VARCHAR(255) DEFAULT NULL,
    postal_code VARCHAR(10) NOT NULL,
    state VARCHAR(50) NOT NULL,
    city VARCHAR(50) NOT NULL,
    PRIMARY KEY (address_id),
    INDEX(postal_code)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE transaction (
	transaction_id INT AUTO_INCREMENT,
    account_id INT NOT NULL,
    transaction_date DATETIME NOT NULL DEFAULT now(),
    isOutgoing BOOLEAN NOT NULL DEFAULT FALSE,
    isIncoming BOOLEAN NOT NULL DEFAULT FALSE,
    amount DECIMAL(13,2) NOT NULL DEFAULT 0,
    transaction_type_id VARCHAR(15) NOT NULL,
    PRIMARY KEY (transaction_id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE transaction_type (
	transaction_type_id VARCHAR(15),
    description TEXT NOT NULL,
    PRIMARY KEY (transaction_type_id),
    UNIQUE(description)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE loan (
	loan_id INT,
    account_id INT NOT NULL,
    monthly_rate DECIMAL(13,2) NOT NULL,
    duration_months INT NOT NULL,
    first_payment DATE NOT NULL,
    monthly_due_day INT(2) NOT NULL,
    PRIMARY KEY (loan_id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE contact_number (
    contact_id INT AUTO_INCREMENT,
	number VARCHAR(15) NOT NULL,
    country_code VARCHAR(6),
    type ENUM('landline','mobile') NOT NULL,
    PRIMARY KEY (contact_id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE customer_contact_number (
	customer_id INT,
    contact_id INT,
    PRIMARY KEY (customer_id, contact_id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;


/* Add foreign keys and any neccessary constraints. */
/* KEY : fk_[referencing table name]_[referenced table name]_[referencing field name]. */
ALTER TABLE account ADD CONSTRAINT fk_account_branch_branch_id
FOREIGN KEY (branch_id) REFERENCES branch(branch_id)
ON DELETE CASCADE ON UPDATE CASCADE; -- DOUBLE CHECK IF THIS IS CORRECT VALID OPTION TO USE (also for the ones below)

ALTER TABLE account ADD CONSTRAINT fk_account_account_types_account_type_id
FOREIGN KEY (account_type_id) REFERENCES account_type(account_type_id)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE branch ADD CONSTRAINT fk_branch_address_address_id
FOREIGN KEY (address_id) REFERENCES address(address_id)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE customer_address ADD CONSTRAINT fk_customer_address_customer_customer_id
FOREIGN KEY (customer_id) REFERENCES customer(customer_id)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE customer_address ADD CONSTRAINT fk_customer_address_address_customer_id
FOREIGN KEY (address_id) REFERENCES address(address_id)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE customer_account ADD CONSTRAINT fk_customer_account_customer_customer_id
FOREIGN KEY (customer_id) REFERENCES customer(customer_id)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE customer_account ADD CONSTRAINT fk_customer_account_account_account_id
FOREIGN KEY (account_id) REFERENCES account(account_id)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE customer_contact_number ADD CONSTRAINT fk_customer_contact_number_customer_customer_id
FOREIGN KEY (customer_id) REFERENCES customer(customer_id)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE customer_contact_number ADD CONSTRAINT fk_customer_contact_number_contact_number_contact_id
FOREIGN KEY (contact_id) REFERENCES contact_number(contact_id)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE transaction ADD CONSTRAINT fk_transaction_account_account_id
FOREIGN KEY (account_id) REFERENCES account(account_id)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE transaction ADD CONSTRAINT fk_transaction_transaction_types_transaction_type_id
FOREIGN KEY (transaction_type_id) REFERENCES transaction_type(transaction_type_id)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE loan ADD CONSTRAINT fk_loan_account_account_id
FOREIGN KEY (account_id) REFERENCES account(account_id)
ON DELETE CASCADE ON UPDATE CASCADE;

-- Check constraints to verify valid data before inserting/updating, else remove that row
-- Check on accounts table to make sure opening balance is greater then 50
ALTER TABLE account ADD CONSTRAINT ob_greater CHECK (opening_balance > 50);

-- Check transactions table to ensure a transaction isnt both incoming and outgoing
ALTER TABLE transaction ADD CONSTRAINT valid_transaction CHECK ((isOutgoing = true AND isIncoming = false) OR
                                                               (isOutgoing = false AND isIncoming = true));

-- DML (Data Manipulation Language) QUERIES 
-- Populating the created tables with data
INSERT INTO address (address_id, address_line1, address_line2, postal_code, state, city)
VALUES
(1, "11 parks bridge", "west avenue road", "E1 7AB", "Greater London City of London", "London"),
(2, "4 knights house", "east brooke avenue", "M1 1TJ", "Greater Manchester", "Manchester"),
(3, "24 brayford", NULL, "LN1 2AB", "Lincolnshire", "Lincoln"),
(4, "33 New Street", NULL, "SL26 2NJ", "Berkshire", "Slough"),
(5, "3 North Road", NULL, "NN85 5OH", "Northhamptonshire", "Northhampton"),
(6, "90 Church Road", NULL, "PO62 9OU", "Hampshire", "Portsmouth"),
(7, "1 Victoria Street", NULL, "UB24 8GY", "Greater London", "Southhall"),
(8, "61 North Street", NULL, "HA72 6ML", "Middlesex", "Harrow"),
(9, "52 The Avenue", NULL, "NG23 2MO", "Nottinghamshire", "Nottingham"),
(10, "78 Queen Street", NULL, "M1 1AD", "Greater Manchester", "Manchester");

INSERT INTO customer (customer_id, first_name, last_name, date_of_birth, email)
VALUES
(1, 'Orran', 'Targetter', '1996-12-08', 'otargetter0@ehow.com'),
(2, 'Danell', 'Braunroth', '1991-11-25', 'dbraunroth1@xrea.com'),
(3, 'Boris', 'Kesley', '1986-11-22', 'bkesley2@addtoany.com'),
(4, 'Antonin', 'Bladon', '1987-03-26', 'abladon3@jugem.jp'),
(5, 'Dorey', 'Nortcliffe', '1962-06-9', 'dnortcliffe4@about.me'),
(6, 'Karlan', 'Scedall', '1982-07-11', 'kscedall5@alibaba.com'),
(7, 'Brewster', 'Swett', '1987-03-13', 'bswett6@squidoo.com'),
(8, 'Jolynn', 'Twinn', '1981-01-22', 'jtwinn7@about.me'),
(9, 'Izabel', 'Boyson', '1995-07-20', 'iboyson8@dion.ne.jp'),
(10, 'Benedicto', 'Scane', '1959-06-02', 'bscane9@tripadvisor.com');

INSERT INTO customer_address (customer_id, address_id)
VALUES
(1,3),
(2,6),
(3,7),
(4,4),
(5,5),
(6,8),
(7,10),
(8,9),
(9,3),
(10,4);
    
INSERT INTO contact_number (contact_id, number, country_code, type)
VALUES
(1, "07484392817", "44", "mobile"),
(2, "07539872531", "44", "mobile"),
(3, "07563890733", "44", "mobile"),
(4, "07566578930", "44", "mobile"),
(5, "07466582912", "44", "mobile"),
(6, "07467434519", "44", "mobile"),
(7, "07446662317", "44", "mobile"),
(8, "07467499910", "44", "mobile"),
(9, "07466682917", "44", "mobile"),
(10, "07777482911", "44", "mobile"),
(11, "016123834880", "44", "landline");

INSERT INTO customer_contact_number (contact_id, customer_id)
VALUES
(11,1),
(11,9),
(1,2),
(2,4),
(3,6),
(4,5),
(5,7),
(6,10),
(7,9),
(8,8),
(9,1),
(10,3);

INSERT INTO branch (branch_id, address_id, branch_name) 
VALUES 
(11, 1, "London main branch"),
(22, 2, "Manchester"),
(33, 3, "Lincoln");

INSERT INTO account_type (account_type_id, description)
VALUES 
("CURRENTACC", "A current account is used for daily banking needs, such as making cash deposits and withdrawals, receiving their salary and setting up direct debits."),
("SAVINGSACC", "With a saving account you pay money into and earn interest from."),
("JOINTACC", "A joint account is a simple way for two people to share access to the same bank account creating one monthly statement.");

-- For the accounts table...
/* the bank code and bank branch code is encoded into the sort number, e.g. the format of the sort code is XXYYZZ where XX = 55 (the bank code for our bank),
YY and ZZ = branch id. The account number is just a random set of 8 characters.*/
INSERT INTO account (account_id, account_type_id, opening_balance, account_number, sort_code, created_date, branch_id)
VALUES
(1, "CURRENTACC", 500, 89947586, 551100,"2020-01-20" ,11),
(2, "CURRENTACC", 800, 12347687, 551100,"2020-02-14" ,11),
(3, "SAVINGSACC", 650.50, 90857689, 551100,"2020-05-17", 11),
(4, "CURRENTACC", 700, 76587654, 553300,"2020-06-09", 33),
(5, "SAVINGSACC", 2000.50, 65767545, 553300,"2020-09-03" , 33),
(6, "CURRENTACC", 850, 87676542, 553300,"2020-11-22", 33),
(7, "JOINTACC", 1500, 87656759, 553300,"2021-02-11", 33),
(8, "CURRENTACC", 80, 90876875, 551100,"2021-04-15", 11),
(9, "CURRENTACC", 150, 87878659, 552200,"2021-06-17", 22),
(10, "CURRENTACC", 500, 38276574, 553300,"2021-10-21", 33);

INSERT INTO customer_account (customer_id, account_id)
VALUES
(1,10),
(1,7),
(9,7),
(2,1),
(3,2),
(4,3),
(5,4),
(7,5),
(8,6),
(6,8),
(10,9);

INSERT INTO transaction_type (transaction_type_id, description)
VALUES
("DEPOSIT", "A deposit is a payment made to a bank account. It is usually made by a customer to pay for goods or services."),
("WITHDRAWAL", "A withdrawal is a payment made from a bank account. It is usually made by a customer to pay for goods or services."),
("TRANSFER", "A transfer is a payment made from one bank account to another. It is usually made by a customer to pay for goods or services."),
("INTEREST", "An interest payment is made to a bank account. It is usually made by a bank to pay the interest on a customer’s account."),
("FEE", "A fee is a payment made to a bank account. It is usually made by a bank to pay for goods or services."),
("PAYMENT", "A payment is a payment made to a bank account. It is usually made by a customer to pay for goods or services."),
("LOAN", "A loan is money the customer is paying monthly, after the bank has agree to give them an inital sum of money."),
("DIRECTDEPOSIT", "A direct deposit is money given to a bank account, usually from an employee as compensation for there labour.");

INSERT INTO loan (loan_id, account_id, monthly_rate, duration_months, first_payment, monthly_due_day)
VALUES
(1,4,300,25,"2021-07-18", 1),
(2,2,200,12,"2021-08-25", 10),
(3,6,150.50,15,"2021-08-01", 17),
(4,7,340,20,"2021-09-22", 5),
(5,8,240.50,18,"2021-10-02", 15);

INSERT INTO transaction (account_id, transaction_date, isOutgoing, isIncoming, amount, transaction_type_id)
VALUES
(1, "2020-01-20 13:08:22", false, true, 500, "DEPOSIT"),
(1, "2020-01-20 16:03:23", true, false, 5.25, "PAYMENT"),
(1, "2020-01-21 11:08:30", false, true, 1500, "TRANSFER"),
(1, "2020-01-22 09:09:10", false, true, 300, "DEPOSIT"),
(1, "2020-01-23 13:08:55", true, false, 3.22, "PAYMENT"),
(1, "2020-02-01 18:23:13", true, false, 40, "WITHDRAWAL"),
(1, "2020-02-03 13:23:34", false, true, 3500, "DIRECTDEPOSIT"),
(1, "2020-02-06 18:10:43", true, false, 2.55, "PAYMENT"),
(1, "2020-02-09 22:34:57", true, false, 0.85, "PAYMENT"),
(1, "2020-02-13 08:55:32", true, false, 6.90, "PAYMENT"),
(2, "2020-02-14 06:23:12", false, true, 800, "DEPOSIT"),
(2, "2020-02-14 19:56:17", false, true, 250, "DIRECTDEPOSIT"),
(2, "2020-02-15 14:09:53", false, true, 50, "DEPOSIT"),
(2, "2020-02-16 14:08:18", true, false, 15.90, "PAYMENT"),
(3, "2020-05-17 20:02:22", false, true, 650.90, "DEPOSIT"),
(2, "2020-02-19 11:11:11", true, false, 0.99, "FEE"),
(2, "2020-02-22 09:09:11", true, false, 10, "WITHDRAWAL"),
(2, "2020-02-23 05:08:05", true, false, 4.50, "PAYMENT"),
(2, "2020-02-27 13:08:25", true, false, 0.50, "FEE"),
(4, "2020-06-09 17:23:28", false, true, 700, "DEPOSIT"),
(4, "2020-06-12 07:09:41", true, false, 5.25, "PAYMENT"),
(4, "2020-06-13 21:57:15", true, false, 2.30, "PAYMENT"),
(4, "2020-06-23 15:32:34", true, false, 12.45, "PAYMENT"),
(4, "2020-06-25 20:54:59", true, false, 40.00, "WITHDRAWAL"),
(4, "2020-06-27 22:08:34", false, true, 100.75, "DIRECTDEPOSIT"),
(4, "2020-06-29 23:14:12", true, false, 0.99, "PAYMENT"),
(4, "2020-06-29 09:08:45", true, false, 1.25, "FEE"),
(5, "2020-09-03 07:04:01", false, true, 2000.50, "DEPOSIT"),
(6, "2020-11-22 06:23:44", false, true, 850, "DEPOSIT"),
(7, "2021-02-11 05:21:52", false, true, 1500, "DEPOSIT"),
(8, "2021-04-15 02:01:01", false, true, 80, "DEPOSIT"),	
(8, "2021-04-16 21:03:07", false, true, 185, "DIRECTDEPOSIT"),	
(9, "2021-06-17 12:21:22", false, true, 150, "DEPOSIT"),             
(10, "2021-10-21 14:08:33", false, true, 500, "DEPOSIT"),
(4, "2021-07-18 18:32:57", true, false, 300, "LOAN"),
(4, "2021-07-19 20:10:45", false, true, 920, "TRANSFER"),   
(6, "2021-08-01 06:37:39", true, false, 150.50, "LOAN"),	
(4, "2021-08-01 09:10:23", true, false, 300, "LOAN"),        
(2, "2021-08-25 10:56:21", true, false, 200, "LOAN"),
(4, "2021-09-01 10:03:03", true, false, 300, "LOAN"),
(2, "2021-09-10 09:09:12", true, false, 200, "LOAN"),
(6, "2021-09-17 21:23:11", true, false, 150.50, "LOAN"),
(7, "2021-09-22 21:21:23", true, false, 340, "LOAN"),
(8, "2021-10-02 23:45:12", true, false, 240.50, "LOAN");


-- Query Tasks
/* (1) List all bank customers (including their name and account number) who have their loan
payment due in the first 7 days of the month. */
SELECT c.first_name, c.last_name, a.account_number
FROM customer c
INNER JOIN customer_account ca ON c.customer_id = ca.customer_id
INNER JOIN account a ON ca.account_id = a.account_id
INNER JOIN loan l ON a.account_id = l.account_id
WHERE l.monthly_due_day <= 7;

/* (2) Extract all bank transactions that were made in the past 5 days (please include customer
and account details). */
/* THIS TASK I HAVE CHOOSEN TO MAKE AS A PROCEDURE, user can enter a date and,
it will show transactions from any account in prvious 5 days from that date.*/

DELIMITER $$
CREATE PROCEDURE find_transactions_past_5_days (IN input_date DATE) 
BEGIN

    SELECT c.*, a.*, t.transaction_date, t.amount, t.transaction_type_id, t.isOutgoing, t.isIncoming
    FROM customer c
    INNER JOIN customer_account ca ON c.customer_id = ca.customer_id
    INNER JOIN account a ON ca.account_id = a.account_id
    INNER JOIN transaction t ON a.account_id = t.account_id
    WHERE t.transaction_date >= SUBDATE(input_date, 5) AND t.transaction_date <= input_date
    ORDER BY t.transaction_date DESC;
    
END $$
DELIMITER ;

CALL find_transactions_past_5_days ("2020-06-13");


/* (3) 4.3. List the customers with their current balance greater than £5000 (at least 1 customer
should have their current balance greater than £5000). The current balance can be calculated by
summing the opening balance of the account, all the incoming transactions of the account, and
deducting the outgoing transactions of the account. */
/* THIS TASK I HAVE CHOOSEN TO MAKE AS A PROCEDURE, user can enter an amount 'X' and,
it will show customers who have there current balance greater then 'X'.*/

DELIMITER $$
CREATE PROCEDURE find_customers_with_balance_greater_then (IN input_amount DECIMAL(13,2)) 
BEGIN
            
    SELECT subtable.cb current_balance, subtable.ci customer_id, subtable.ai account_id,
    	   subtable.fn first_name, subtable.ln last_name
    FROM (
        SELECT SUM(IF(t.isIncoming, t.amount, 0)) - SUM(IF(t.isOutgoing, t.amount, 0)) cb,
               c.customer_id ci, a.account_id ai, c.first_name fn, c.last_name ln
        FROM customer c
        INNER JOIN customer_account ca ON c.customer_id = ca.customer_id
        INNER JOIN account a ON ca.account_id = a.account_id
        INNER JOIN transaction t ON a.account_id = t.account_id
        GROUP BY a.account_id
    ) subtable
    WHERE subtable.cb > input_amount
    ORDER BY subtable.cb DESC;
            
END $$
DELIMITER ;

CALL find_customers_with_balance_greater_then (5000);



-- DCL (Data Control Language) QUERIES 
-- Creating user and setting permissions
-- Creating a read only user to limit database access and increase security.

-- FIND WHY THIS CAUSING THE ERROR
/*
DROP USER IF EXISTS 'readonly'@'localhost';
CREATE USER 'readonly'@'localhost' IDENTIFIED BY 'Readonly1934@';
GRANT SELECT ON bank_assignment.* TO 'readonly'@'localhost';
*/